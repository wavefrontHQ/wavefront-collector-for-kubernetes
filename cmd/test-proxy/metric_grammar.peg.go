package main

// Code generated by peg -switch -inline /Users/matthewco/workspace/wavefront-collector-for-kubernetes/cmd/test-proxy/metric_grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleMetricGrammar
	ruletags
	ruletag
	ruletagName
	ruletagValue
	ruletimestamp
	rulemetricValue
	rulemetricName
	ruleALNUM
	ruleDIGIT
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
)

var rul3s = [...]string{
	"Unknown",
	"MetricGrammar",
	"tags",
	"tag",
	"tagName",
	"tagValue",
	"timestamp",
	"metricValue",
	"metricName",
	"ALNUM",
	"DIGIT",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MetricGrammar struct {
	Name       string
	Value      string
	Timestamp  string
	Tags       map[string]string
	currentTag string

	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MetricGrammar) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MetricGrammar) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MetricGrammar
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MetricGrammar) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MetricGrammar) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *MetricGrammar) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *MetricGrammar) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Tags = map[string]string{}
		case ruleAction1:
			p.currentTag = text
		case ruleAction2:
			p.Tags[p.currentTag] = text
		case ruleAction3:
			p.Timestamp = text
		case ruleAction4:
			p.Value = text
		case ruleAction5:
			p.Name = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*MetricGrammar) error {
	return func(p *MetricGrammar) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MetricGrammar) error {
	return func(p *MetricGrammar) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MetricGrammar) Init(options ...func(*MetricGrammar) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 MetricGrammar <- <(metricName ' ' metricValue (' ' timestamp)? ' ' tags !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l4
						}
						position++
						{
							position5 := position
							{
								position6, tokenIndex6 := position, tokenIndex
								if buffer[position] != rune('âˆ†') {
									goto l6
								}
								position++
								goto l7
							l6:
								position, tokenIndex = position6, tokenIndex6
							}
						l7:
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('~') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position12, tokenIndex12 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l13
								}
								goto l12
							l13:
								position, tokenIndex = position12, tokenIndex12
								{
									switch buffer[position] {
									case ',':
										if buffer[position] != rune(',') {
											goto l4
										}
										position++
									case '/':
										if buffer[position] != rune('/') {
											goto l4
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l4
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l4
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l4
										}
										position++
									default:
										if buffer[position] != rune('~') {
											goto l4
										}
										position++
									}
								}

							}
						l12:
						l10:
							{
								position11, tokenIndex11 := position, tokenIndex
								{
									position15, tokenIndex15 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l16
									}
									goto l15
								l16:
									position, tokenIndex = position15, tokenIndex15
									{
										switch buffer[position] {
										case ',':
											if buffer[position] != rune(',') {
												goto l11
											}
											position++
										case '/':
											if buffer[position] != rune('/') {
												goto l11
											}
											position++
										case '.':
											if buffer[position] != rune('.') {
												goto l11
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l11
											}
											position++
										case '-':
											if buffer[position] != rune('-') {
												goto l11
											}
											position++
										default:
											if buffer[position] != rune('~') {
												goto l11
											}
											position++
										}
									}

								}
							l15:
								goto l10
							l11:
								position, tokenIndex = position11, tokenIndex11
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('"') {
							goto l4
						}
						position++
						goto l3
					l4:
						position, tokenIndex = position3, tokenIndex3
						{
							position18 := position
							{
								position19, tokenIndex19 := position, tokenIndex
								if buffer[position] != rune('âˆ†') {
									goto l19
								}
								position++
								goto l20
							l19:
								position, tokenIndex = position19, tokenIndex19
							}
						l20:
							{
								position21, tokenIndex21 := position, tokenIndex
								if buffer[position] != rune('~') {
									goto l21
								}
								position++
								goto l22
							l21:
								position, tokenIndex = position21, tokenIndex21
							}
						l22:
							{
								position25, tokenIndex25 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l26
								}
								goto l25
							l26:
								position, tokenIndex = position25, tokenIndex25
								{
									switch buffer[position] {
									case ',':
										if buffer[position] != rune(',') {
											goto l0
										}
										position++
									case '/':
										if buffer[position] != rune('/') {
											goto l0
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l0
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l0
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l0
										}
										position++
									default:
										if buffer[position] != rune('~') {
											goto l0
										}
										position++
									}
								}

							}
						l25:
						l23:
							{
								position24, tokenIndex24 := position, tokenIndex
								{
									position28, tokenIndex28 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l29
									}
									goto l28
								l29:
									position, tokenIndex = position28, tokenIndex28
									{
										switch buffer[position] {
										case ',':
											if buffer[position] != rune(',') {
												goto l24
											}
											position++
										case '/':
											if buffer[position] != rune('/') {
												goto l24
											}
											position++
										case '.':
											if buffer[position] != rune('.') {
												goto l24
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l24
											}
											position++
										case '-':
											if buffer[position] != rune('-') {
												goto l24
											}
											position++
										default:
											if buffer[position] != rune('~') {
												goto l24
											}
											position++
										}
									}

								}
							l28:
								goto l23
							l24:
								position, tokenIndex = position24, tokenIndex24
							}
							add(rulePegText, position18)
						}
					}
				l3:
					{
						add(ruleAction5, position)
					}
					add(rulemetricName, position2)
				}
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position32 := position
					{
						position33 := position
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l34
							}
							position++
							goto l35
						l34:
							position, tokenIndex = position34, tokenIndex34
						}
					l35:
						if !_rules[ruleDIGIT]() {
							goto l0
						}
					l36:
						{
							position37, tokenIndex37 := position, tokenIndex
							if !_rules[ruleDIGIT]() {
								goto l37
							}
							goto l36
						l37:
							position, tokenIndex = position37, tokenIndex37
						}
						{
							position38, tokenIndex38 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l38
							}
							position++
							if !_rules[ruleDIGIT]() {
								goto l38
							}
						l40:
							{
								position41, tokenIndex41 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l41
								}
								goto l40
							l41:
								position, tokenIndex = position41, tokenIndex41
							}
							goto l39
						l38:
							position, tokenIndex = position38, tokenIndex38
						}
					l39:
						add(rulePegText, position33)
					}
					{
						add(ruleAction4, position)
					}
					add(rulemetricValue, position32)
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l43
					}
					position++
					{
						position45 := position
						{
							position46 := position
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							if !_rules[ruleDIGIT]() {
								goto l43
							}
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l47
								}
								if !_rules[ruleDIGIT]() {
									goto l47
								}
								if !_rules[ruleDIGIT]() {
									goto l47
								}
								goto l48
							l47:
								position, tokenIndex = position47, tokenIndex47
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l49
								}
								if !_rules[ruleDIGIT]() {
									goto l49
								}
								if !_rules[ruleDIGIT]() {
									goto l49
								}
								goto l50
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
						l50:
							add(rulePegText, position46)
						}
						{
							add(ruleAction3, position)
						}
						add(ruletimestamp, position45)
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position52 := position
					{
						add(ruleAction0, position)
					}
					if !_rules[ruletag]() {
						goto l0
					}
				l54:
					{
						position55, tokenIndex55 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l55
						}
						position++
						if !_rules[ruletag]() {
							goto l55
						}
						goto l54
					l55:
						position, tokenIndex = position55, tokenIndex55
					}
					add(ruletags, position52)
				}
				{
					position56, tokenIndex56 := position, tokenIndex
					if !matchDot() {
						goto l56
					}
					goto l0
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
				add(ruleMetricGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 tags <- <(Action0 tag (' ' tag)*)> */
		nil,
		/* 2 tag <- <(tagName '=' tagValue)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				{
					position60 := position
					{
						position61, tokenIndex61 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l62
						}
						position++
						{
							position63 := position
							{
								position66, tokenIndex66 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l67
								}
								goto l66
							l67:
								position, tokenIndex = position66, tokenIndex66
								{
									switch buffer[position] {
									case '.':
										if buffer[position] != rune('.') {
											goto l62
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l62
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l62
										}
										position++
									default:
										if buffer[position] != rune('/') {
											goto l62
										}
										position++
									}
								}

							}
						l66:
						l64:
							{
								position65, tokenIndex65 := position, tokenIndex
								{
									position69, tokenIndex69 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l70
									}
									goto l69
								l70:
									position, tokenIndex = position69, tokenIndex69
									{
										switch buffer[position] {
										case '.':
											if buffer[position] != rune('.') {
												goto l65
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l65
											}
											position++
										case '-':
											if buffer[position] != rune('-') {
												goto l65
											}
											position++
										default:
											if buffer[position] != rune('/') {
												goto l65
											}
											position++
										}
									}

								}
							l69:
								goto l64
							l65:
								position, tokenIndex = position65, tokenIndex65
							}
							add(rulePegText, position63)
						}
						if buffer[position] != rune('"') {
							goto l62
						}
						position++
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						{
							position72 := position
							{
								position75, tokenIndex75 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l76
								}
								goto l75
							l76:
								position, tokenIndex = position75, tokenIndex75
								{
									switch buffer[position] {
									case '.':
										if buffer[position] != rune('.') {
											goto l58
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l58
										}
										position++
									default:
										if buffer[position] != rune('-') {
											goto l58
										}
										position++
									}
								}

							}
						l75:
						l73:
							{
								position74, tokenIndex74 := position, tokenIndex
								{
									position78, tokenIndex78 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l79
									}
									goto l78
								l79:
									position, tokenIndex = position78, tokenIndex78
									{
										switch buffer[position] {
										case '.':
											if buffer[position] != rune('.') {
												goto l74
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l74
											}
											position++
										default:
											if buffer[position] != rune('-') {
												goto l74
											}
											position++
										}
									}

								}
							l78:
								goto l73
							l74:
								position, tokenIndex = position74, tokenIndex74
							}
							add(rulePegText, position72)
						}
					}
				l61:
					{
						add(ruleAction1, position)
					}
					add(ruletagName, position60)
				}
				if buffer[position] != rune('=') {
					goto l58
				}
				position++
				{
					position82 := position
					if buffer[position] != rune('"') {
						goto l58
					}
					position++
					{
						position83 := position
						{
							position86, tokenIndex86 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l87
							}
							position++
							if buffer[position] != rune('"') {
								goto l87
							}
							position++
							goto l86
						l87:
							position, tokenIndex = position86, tokenIndex86
							{
								position88, tokenIndex88 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l88
								}
								position++
								goto l58
							l88:
								position, tokenIndex = position88, tokenIndex88
							}
							if !matchDot() {
								goto l58
							}
						}
					l86:
					l84:
						{
							position85, tokenIndex85 := position, tokenIndex
							{
								position89, tokenIndex89 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l90
								}
								position++
								if buffer[position] != rune('"') {
									goto l90
								}
								position++
								goto l89
							l90:
								position, tokenIndex = position89, tokenIndex89
								{
									position91, tokenIndex91 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l91
									}
									position++
									goto l85
								l91:
									position, tokenIndex = position91, tokenIndex91
								}
								if !matchDot() {
									goto l85
								}
							}
						l89:
							goto l84
						l85:
							position, tokenIndex = position85, tokenIndex85
						}
						add(rulePegText, position83)
					}
					if buffer[position] != rune('"') {
						goto l58
					}
					position++
					{
						add(ruleAction2, position)
					}
					add(ruletagValue, position82)
				}
				add(ruletag, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 3 tagName <- <((('"' <(ALNUM / ((&('.') '.') | (&('_') '_') | (&('-') '-') | (&('/') '/')))+> '"') / <(ALNUM / ((&('.') '.') | (&('_') '_') | (&('-') '-')))+>) Action1)> */
		nil,
		/* 4 tagValue <- <('"' <(('\\' '"') / (!'"' .))+> '"' Action2)> */
		nil,
		/* 5 timestamp <- <(<(DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT (DIGIT DIGIT DIGIT)? (DIGIT DIGIT DIGIT)?)> Action3)> */
		nil,
		/* 6 metricValue <- <(<('-'? DIGIT+ ('.' DIGIT+)?)> Action4)> */
		nil,
		/* 7 metricName <- <((('"' <('âˆ†'? '~'? (ALNUM / ((&(',') ',') | (&('/') '/') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('~') '~')))+)> '"') / <('âˆ†'? '~'? (ALNUM / ((&(',') ',') | (&('/') '/') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('~') '~')))+)>) Action5)> */
		nil,
		/* 8 ALNUM <- <((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				{
					switch buffer[position] {
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l98
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l98
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l98
						}
						position++
					}
				}

				add(ruleALNUM, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 9 DIGIT <- <[0-9]> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l101
				}
				position++
				add(ruleDIGIT, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 11 Action0 <- <{ p.Tags = map[string]string{} }> */
		nil,
		nil,
		/* 13 Action1 <- <{ p.currentTag = text }> */
		nil,
		/* 14 Action2 <- <{ p.Tags[p.currentTag] = text }> */
		nil,
		/* 15 Action3 <- <{ p.Timestamp = text }> */
		nil,
		/* 16 Action4 <- <{ p.Value = text }> */
		nil,
		/* 17 Action5 <- <{ p.Name = text }> */
		nil,
	}
	p.rules = _rules
	return nil
}
