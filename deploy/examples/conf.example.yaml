apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: wavefront-collector
data:
  collector.yaml: |
    clusterName: test-gke-cluster-1
    enableDiscovery: true
    enableEvents: true
    flushInterval: 30s

    sinks:
    - proxyAddress: wavefront-proxy.default.svc.cluster.local:2878
      tags:
        env: non-production
        region: us-west-2

      filters:
        # Filter out infrequently used kube-state-metrics.
        metricBlacklist:
        - 'kube.configmap.annotations.gauge'
        - 'kube.configmap.metadata.resource.version.gauge'
        - 'kube.endpoint.*'
        - 'kube.job.owner.gauge'
        - 'kube.job.labels.gauge'
        - 'kube.job.spec.completions.gauge'
        - 'kube.job.spec.parallelism.gauge'
        - 'kube.job.status.start.time.gauge'
        - 'kube.limitrange.*'
        - 'kube.namespace.annotations.gauge'        
        - 'kube.persistentvolume.*'
        - 'kube.persistentvolumeclaim.*'
        - 'kube.pod.container.resource.limits.*'
        - 'kube.pod.container.*.reason.gauge'
        - 'kube.pod.labels.gauge'
        - 'kube.pod.owner.gauge'
        - 'kube.pod.start.time.gauge'
        - 'kube.pod.status.scheduled.gauge'
        - 'kube.pod.status.scheduled.time.gauge'
        - 'kube.replicationcontroller.created.gauge'
        - 'kube.replicationcontroller.metadata.generation.gauge'
        - 'kube.replicationcontroller.spec.replicas.gauge'
        - 'kube.resourcequota.*'
        - 'kube.secret.*'
        - 'kube.statefulset.*'
        - 'kube.storageclass.*'
        # Filter out generated labels        
        tagExclude:
        - 'label.controller-revision-hash'
        - 'label.pod-template-*'        

    events:
      filters:
        tagWhitelist:
          namespace:
          - "default"

    sources:
      kubernetes_source:
        url: 'https://kubernetes.default.svc'
        kubeletPort: 10250
        kubeletHttps: true
        useServiceAccount: true
        insecure: true
        prefix: 'kubernetes.'

        filters:
          metricBlacklist:
          - 'kubernetes.sys_container.*'
          - 'kubernetes.node.ephemeral_storage.*'

      internal_stats_source:
        prefix: 'kubernetes.'

      telegraf_sources:
      # enable all telegraf plugins
      - plugins: []

      # systemd_source:
      #   prefix: 'kubernetes.systemd.'

      prometheus_sources:
      # collect metrics from the Kubernetes API server
      - url: 'https://kubernetes.default.svc.cluster.local:443/metrics'
        httpConfig:
          bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token'
          tls_config:
            ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            insecure_skip_verify: true
        prefix: 'kube.apiserver.'

        filters:
          metricWhitelist:
          - 'kube.apiserver.apiserver.*'
          - 'kube.apiserver.etcd.*'
          - 'kube.apiserver.process.*'

    # discovery rules for auto-discovery of pods and services
    discovery_configs:

    # auto-discover redis master and slave pods
    - name: redis
      type: telegraf/redis
      selectors:
        images:
        - 'redis:*'
        - '*redis*'
      port: 6379
      scheme: "tcp"
      conf: |
        servers = ["${server}"]

    # auto-discover memcached pods
    - name: memcached
      type: telegraf/memcached
      selectors:
        images:
        - 'memcached:*'
      port: 11211
      conf: |
        servers = ["${host}:${port}"]

    # auto-discover apache httpd pods
    - name: apache
      type: telegraf/apache
      selectors:
        images:
        - '*apache:2.4.39*'
      port: 8080
      conf: |
        urls = ["http://${host}:${port}/server-status?auto"]

    # auto-discover kube DNS
    - name: kube-dns-discovery
      type: prometheus
      selectors:
        labels:
          k8s-app:
          - kube-dns
      port: 10054
      path: /metrics
      scheme: http
      prefix: kube.dns.

      filters:
        metricWhitelist:
        - 'kube.dns.http.request.duration.microseconds'
        - 'kube.dns.http.request.size.bytes'
        - 'kube.dns.http.requests.total.counter'
        - 'kube.dns.http.response.size.bytes'
        - 'kube.dns.kubedns.dnsmasq.*'
        - 'kube.dns.process.*'

    # auto-discover a sample prometheus application
    - name: prom-example
      type: prometheus
      selectors:
        labels:
          k8s-app:
          - prom-example
      port: 8080
      path: /metrics
      prefix: kube.prom-example.
      tags:
        alt_name: sample-app
